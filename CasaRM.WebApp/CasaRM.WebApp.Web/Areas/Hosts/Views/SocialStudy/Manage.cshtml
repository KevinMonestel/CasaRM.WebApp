@model CreateOrUpdateSocialStudyViewModel

@{
    ViewData["Title"] = "Administrar estudio social";
}

<h1 class="h1 mb-3">
    <strong>Huéspedes</strong>
    @if(string.IsNullOrEmpty(Model.HostId)){
        <span>Nuevo Ingreso</span>
    }else{
        <span>Editar formulario</span>
    }
</h1>

<form id="mainDataForm">
    <input asp-for="HostId" hidden />
    <input asp-for="SocialStudyId" hidden />
</form>

<div class="card">
    <div class="card-header">
        <h5 class="card-title mb-0">1. Datos de la Persona Menor de Edad</h5>
    </div>

    <div class="card-body">
        <partial name="~/Areas/Hosts/Views/SocialStudy/Partials/_MinorPersonDataForm.cshtml" model="Model.MinorPersonDataFormViewModel" />
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h5 class="card-title mb-0">2. Acompañantes</h5>
    </div>

    <div class="card-body">

        <div class="mb-3">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#companionDataFormModal">
                Añadir registro
            </button>
        </div>

        <!--Companion Data Form Modal -->
        <div class="modal fade" id="companionDataFormModal" tabindex="-1" aria-labelledby="familyGroupForm" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Acompañantes</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <partial name="~/Areas/Hosts/Views/SocialStudy/Partials/_CompanionDataForm.cshtml" model="Model.CompanionDataFormViewModel" />
                    </div>
                </div>
            </div>
        </div>

        <div class="alert alert-danger alert-outline" role="alert" id="companionChargePersonAlert">
            <div class="alert-icon">
                <i data-feather="info"></i>
            </div>
            <div class="alert-message">
                Debe agregar obligatoriamente un acompañante a cargo <small>(Este mensaje desaparecerá cuando se agregue una persona a cargo)</small>
            </div>
        </div>

        <partial name="~/Areas/Hosts/Views/SocialStudy/Partials/_CompanionDataList.cshtml" model="Model.CompanionDataListViewModel" />
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h5 class="card-title mb-0">3. Composición del grupo familiar</h5>
    </div>

    <div class="card-body">
        <div class="alert alert-warning alert-outline alert-dismissible" role="alert">
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            <div class="alert-icon">
                <i data-feather="info"></i>
            </div>
            <div class="alert-message">
                Deberá incluir la información concerniente a todas las personas que residen bajo el mismo techo
            </div>
        </div>

        <div class="mb-3">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#familyGroupFormModal">
                Añadir registro
            </button>
        </div>

        <!-- Family Group Form Modal -->
        <div class="modal fade" id="familyGroupFormModal" tabindex="-1" aria-labelledby="familyGroupForm" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Grupo de familia</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <partial name="~/Areas/Hosts/Views/SocialStudy/Partials/_FamilyGroupForm.cshtml" model="Model.FamilyGroupFormViewModel" />
                    </div>
                </div>
            </div>
        </div>

        <partial name="~/Areas/Hosts/Views/SocialStudy/Partials/_FamilyGroupList.cshtml" model="Model.FamilyGroupListViewModel" />
    </div>

    <div class="card-header">
        <h5 class="card-title mb-0">3.1. Aportes de personas que no viven en la misma casa</h5>
    </div>

    <div class="card-body">
        <div class="alert alert-warning alert-outline alert-dismissible" role="alert">
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            <div class="alert-icon">
                <i data-feather="info"></i>
            </div>
            <div class="alert-message">
                Deberá incluir la información concerniente a los aportes de las personas que no residen bajo el mismo techo
            </div>
        </div>

        <div class="mb-3">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#contributionFormModal">
                Añadir registro
            </button>
        </div>

        <!-- Contribution Form Modal -->
        <div class="modal fade" id="contributionFormModal" tabindex="-1" aria-labelledby="ContributionForm" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Aportes</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <partial name="~/Areas/Hosts/Views/SocialStudy/Partials/_ContributionForm.cshtml" model="Model.ContributionFormViewModel" />
                    </div>
                </div>
            </div>
        </div>

        <partial name="~/Areas/Hosts/Views/SocialStudy/Partials/_ContributionList.cshtml" model="Model.ContributionListViewModel" />
    </div>

    <div class="card-header">
        <h5 class="card-title mb-0">3.2. Calculo ingreso según línea de pobreza</h5>
    </div>

    <div class="card-body">
        <partial name="~/Areas/Hosts/Views/SocialStudy/Partials/_IncomeCalculationForm.cshtml" model="Model.IncomeCalculationFormViewModel" />
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h5 class="card-title mb-0">4. Situación Habitacional</h5>
    </div>

    <div class="card-body">
        <partial name="~/Areas/Hosts/Views/SocialStudy/Partials/_HousingSituationForm.cshtml" model="Model.HousingSituationFormViewModel" />
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">5. Redes de Apoyo</h5>
            </div>

            <div class="card-body">
                <partial name="~/Areas/Hosts/Views/SocialStudy/Partials/_SupportServicesForm.cshtml" model="Model.SupportServicesFormViewModel" />
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">6. Recomendaciones</h5>
            </div>

            <div class="card-body">
                <partial name="~/Areas/Hosts/Views/SocialStudy/Partials/_RecomendationForm.cshtml" model="Model.RecomendationFormViewModel" />
            </div>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h5 class="card-title mb-0">7. Firma</h5>
    </div>

    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <div class="d-flex flex-column justify-content-center align-content-center">
                    <div class="text-center"><button type="button" class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#signatureFormModal">Añadir firma</button></div>
                    <div class="text-center"><button type="button" name="cleanSignature" class="btn btn-outline-danger">Limpiar</button></div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="col-md-6">
                    <p>Firma confirmada (Se guardará así)</p>
                    <img width="200" height="100" id="signatureAcceptedImg" class="border mx-auto d-block" src="@Model.SignatureDataUrl">
                </div>
            </div>
        </div>
    </div>

    <!-- Signature Form Modal -->
    <div class="modal fade" id="signatureFormModal" tabindex="-1" aria-labelledby="familyGroupForm" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Añadir registro - Firma</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="signatureDataForm">
                        <p>Realizar firma</p>
                        <div class="d-flex justify-content-center align-content-center">
                            <canvas width="400" height="200" id="signatureCanvas" class="border border-primary"></canvas>
                        </div>

                        <div class="my-3">
                            <button type="button" name="cleanSignature" class="btn btn-outline-danger">Limpiar</button>
                            <button type="button" id="acceptSignature" class="btn btn-primary">Confirmar firma</button>
                        </div>

                        <input type="text" asp-for="SignatureDataUrl" readonly class="form-control" hidden>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="text-center">
    <button type="button" class="btn btn-primary btn-lg" data-bs-toggle="modal" data-bs-target="#confirmationModal">
        Guardar información
    </button>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmationModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="confirmation" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">¿Estás seguro/a?</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>La información será guardada</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="saveSocialStudyBtn">Guardar</button>
            </div>
        </div>
    </div>
</div>

<!-- Sending Identifier Modal -->
<div class="modal fade" id="sendingInfoModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="confirmation" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <p>Guardando información...</p>
            </div>
        </div>
    </div>
</div>

@section Styles{
    <link rel="stylesheet" href="~/lib/snackbar/css/toastr.min.css" />
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/lib/jquery-serialize-object/js/jquery.serialize-object.min.js"></script>
    <script src="~/lib/snackbar/js/toastr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/signature_pad@4.0.0/dist/signature_pad.umd.min.js"></script>
    <script type="text/javascript">
        var saveSocialStudyBtn = $("#saveSocialStudyBtn");
        var confirmationModal = $("#confirmationModal");
        var sendingInfoModal = $("#sendingInfoModal");
        var companionDataForm = $("#companionDataForm");
        var companionData = @Html.Raw(Json.Serialize(Model.CompanionDataListViewModel));
        var familyGroupData = @Html.Raw(Json.Serialize(Model.FamilyGroupListViewModel));
        var contributionData = @Html.Raw(Json.Serialize(Model.ContributionListViewModel));
        var familyGroupForm = $("#familyGroupForm");
        var contributionForm = $("#contributionForm");
        var signatureDataForm = $("#signatureDataForm");
        var signatureCanvas = document.querySelector('#signatureCanvas');
        var signaturePad = new SignaturePad(signatureCanvas, {
            minDistance: 0
        });
        var companionChargePersonAlert = $("#companionChargePersonAlert");

        saveSocialStudyBtn.on("click", function () {
            let mainDataForm = $("#mainDataForm");
            let minorPersonDataForm = $("#minorPersonDataForm");
            let incomeCalculationForm = $("#incomeCalculationForm");
            let housingSituationForm = $("#housingSituationForm");
            let supportServicesForm = $("#supportServicesForm");
            let recomendationForm = $("#recomendationForm");
            let saveSocialStudyUrl = "@Url.Action("Save", "SocialStudy", new { area = "Hosts" })";

            confirmationModal.modal("hide");

            // Validations
            if (!minorPersonDataForm.valid() ||
                !incomeCalculationForm.valid() ||
                !housingSituationForm.valid() ||
                !supportServicesForm.valid() ||
                !recomendationForm.valid() ||
                !signatureDataForm.valid()) {
                toastr.error('Campos requeridos se encuentran actualmente con errores de validación. Por favor, revisa el formulario', '¡Atención!');

                return;
            }

            if (!companionData.find(x => x.isAPersonInCharge || x.IsAPersonInCharge)) {
                toastr.error('Debe agregar obligatoriamente un acompañante a cargo', '¡Atención!');
                return;
            }

            let signatureData = signatureDataForm.find("input[name=SignatureDataUrl]").val();
            if (signatureData == null || signatureData == ""){
                toastr.error('La firma es obligatoria. Por favor añadir una firma de la persona acompañante a cargo', '¡Atención!');

                return;
            }

            // Super obj
            let socialStudyFullObj = {
                hostId: mainDataForm.find('input[name=HostId]').val(),
                socialStudyId: mainDataForm.find('input[name=SocialStudyId]').val(),
                SignatureDataUrl: signatureDataForm.find("input[name=SignatureDataUrl]").val(),
                MinorPersonDataFormViewModel: minorPersonDataForm.serializeObject(),
                CompanionDataListViewModel: companionData,
                FamilyGroupListViewModel: familyGroupData,
                ContributionListViewModel: contributionData,
                IncomeCalculationFormViewModel: incomeCalculationForm.serializeObject(),
                HousingSituationFormViewModel: housingSituationForm.serializeObject(),
                SupportServicesFormViewModel: supportServicesForm.serializeObject(),
                RecomendationFormViewModel: recomendationForm.serializeObject()
            }

            socialStudyFullObj.HousingSituationFormViewModel.BasicServices = housingSituationForm.find("select[name=BasicServices]").val()

            sendingInfoModal.modal("show");

            console.log(socialStudyFullObj)

            // Call to Save Social Study action
            $.post(saveSocialStudyUrl, socialStudyFullObj, function (data) {
                location.href = data.redirectUrl
            })
                .done(function () {

                })
                .fail(function () {
                    sendingInfoModal.modal("hide");
                    toastr.error('Un error ha ocurrido mientras se procesaba la información. Por favor vuelve a intentarlo. Si el problema persiste, contactar al encargado', '¡Atención!');
                })
                .always(function () {

                });
        });

        function checkCompanionsForPersonInCharge(){
            let companionInCharge = companionData.find(x => x.isAPersonInCharge || x.IsAPersonInCharge);

            if (!companionInCharge){
                companionChargePersonAlert.show();
                return;
            }

            companionChargePersonAlert.hide();
        }

        checkCompanionsForPersonInCharge();

        companionDataForm.submit(function (e) {
            e.preventDefault();

            if (!companionDataForm.valid()) return;

            let companionDataListTable = $("#companionDataListTable");
            let companionDataFormModal = $("#companionDataFormModal");
            let formDataObj = $(this).serializeObject();
            formDataObj.IsAPersonInCharge = $(this).find("input[name=IsAPersonInCharge]").is(":checked");

            if ((companionData.find(x => x.isAPersonInCharge || x.IsAPersonInCharge)) && formDataObj.IsAPersonInCharge) {
                toastr.error('Sólo se puede agregar a una persona a cargo', '¡Atención!');
                return;
            }

            companionDataListTable.find("tbody").append(`
                                                            <tr>
                                                                <td>${formDataObj.FullName}</td>
                                                                <td>${formDataObj.Relationship}</td>
                                                                <td>${formDataObj.Age}</td>
                                                                <td>${formDataObj.MaritalStatus}</td>
                                                                <td>${formDataObj.Scholarship}</td>
                                                                <td>${formDataObj.Ocupation}</td>
                                                                <td>${formDataObj.IsAPersonInCharge == true ? 'Sí' : 'No'}</td>
                                                                <td class="text-end"><button class="btn btn-danger" name="deleteRow" data-type="companionData">X</button></td>
                                                            </tr>`);

            companionData.push(formDataObj);

            checkCompanionsForPersonInCharge();
            companionDataFormModal.modal("hide");
            companionDataForm[0].reset();
        });

        familyGroupForm.submit(function (e) {
            e.preventDefault();

            if (!familyGroupForm.valid()) return;

            let familyGroupListTable = $("#familyGroupListTable");
            let familyGroupFormModal = $("#familyGroupFormModal");
            let formDataObj = $(this).serializeObject();

            familyGroupListTable.find("tbody").append(`
                                                    <tr>
                                                        <td>${formDataObj.FullName}</td>
                                                        <td>${formDataObj.Relationship}</td>
                                                        <td>${formDataObj.Age}</td>
                                                        <td>${formDataObj.MaritalStatus}</td>
                                                        <td>${formDataObj.Scholarship}</td>
                                                        <td>${formDataObj.Ocupation}</td>
                                                        <td>${formDataObj.MonthlyGrossIncome}</td>
                                                        <td class="text-end"><button class="btn btn-danger" name="deleteRow" data-type="familyGroup">X</button></td>
                                                    </tr>`);
            familyGroupData.push(formDataObj);

            familyGroupFormModal.modal("hide");
            familyGroupForm[0].reset();
        });

        contributionForm.submit(function (e) {
            e.preventDefault();

            if (!contributionForm.valid()) return;

            let contributionListTable = $("#contributionListTable");
            let contributionFormModal = $("#contributionFormModal");
            let formDataObj = $(this).serializeObject();

            contributionListTable.find("tbody").append(`
                                                    <tr>
                                                        <td>${formDataObj.FullName}</td>
                                                        <td>${formDataObj.Relationship}</td>
                                                        <td>${formDataObj.Ocupation}</td>
                                                        <td>${formDataObj.MonthlyContribution}</td>
                                                        <td class="text-end"><button class="btn btn-danger" name="deleteRow" data-type="contribution">X</button></td>
                                                    </tr>`);

            contributionData.push(formDataObj);

            contributionFormModal.modal("hide");
            contributionForm[0].reset();
        });

        $("body").on("click", "button[name='deleteRow']", function (e) {
            e.preventDefault();

            let type = $(this).data("type");
            let index = $(this).closest('tr').index();

            if(type == "contribution")
                contributionData.splice(index, 1);

            if(type == "familyGroup")
                familyGroupData.splice(index, 1);

            if (type == "companionData"){
                companionData.splice(index, 1);
                checkCompanionsForPersonInCharge();
            }

            $(this).closest('tr').remove();
        })

        $("#minorPersonDataForm").find("input[name='DateOfBirth']").on('change', function () {
            var firstdate = new Date($(this).val());
            var today = new Date();
            var dayDiff = Math.ceil(today.getTime() - firstdate.getTime()) / (1000 * 60 * 60 * 24 * 365);
            var age = parseInt(dayDiff);

            $("#minorPersonDataForm").find("input[name='Age']").val(age);
        });

        $("#companionDataForm").find("input[name='DateOfBirth']").on('change', function () {
            var firstdate = new Date($(this).val());
            var today = new Date();
            var dayDiff = Math.ceil(today.getTime() - firstdate.getTime()) / (1000 * 60 * 60 * 24 * 365);
            var age = parseInt(dayDiff);

            $("#companionDataForm").find("input[name='Age']").val(age);
        });

        $("#housingSituationForm").find("select[name=BasicServices] option").mousedown(function (e) {
            e.preventDefault();
            this.selected = !this.selected;
            return false;
        });

        $("#acceptSignature").click(function (e) {
            e.preventDefault();

            if (signaturePad.isEmpty()) return;

            let data = signaturePad.toDataURL("image/svg+xml", 0.5);
            let signatureFormModal = $("#signatureFormModal");

            $("#signatureAcceptedImg").attr("src", data);
            signatureDataForm.find("input[name=SignatureDataUrl]").val(data);

            signatureFormModal.modal("hide");
        });

        $("button[name=cleanSignature]").click(function (e) {
            e.preventDefault();

            $("#signatureAcceptedImg").removeAttr("src");
            signatureDataForm.find("input[name=SignatureDataUrl]").val(null);

            signaturePad.clear();
        });
    </script>
}
